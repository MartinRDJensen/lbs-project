(*

Message 1: A -> S : ( A, B, nA )
Message 2: S -> A : { nA, kAB, B, {kAB, A}kBS }kAS
Message 3: A -> B : { kAB, A }kBS
Message 4: B -> A : { nB }kAB
Message 5: A -> B : { dec(nB) }kAB

*)

free c: channel.

type host.
type nonce.
type key.

fun encrypt(key, bitstring): bitstring.
reduc forall k: key, m: bitstring; decrypt(k, encrypt(k, m)) = m.

fun nonce_to_bitstring(nonce): bitstring.
reduc forall n: nonce; bitstring_to_nonce(nonce_to_bitstring(n)) = n.

free secretA, secretB: bitstring [private].
query attacker(secretA).
query attacker(secretB).

event initiatorAccepts(host, host).
event responderAccepts(host, host).

fun dec(nonce): nonce.

not attacker(new kAS).
not attacker(new kBS).

free A, B: host.

(* Uncomment these to verify that the end state can be reached. *)
(* query event(initiatorAccepts(A, B)). *)
(* query event(responderAccepts(A, B)). *)

letfun initiate_A(kAS: key, a: host, b: host, nA: nonce) =
    ((kAS, b, nA), (a, b, nA)).

letfun generate_key_S(kAS: key, kBS: key, m1: bitstring, kAB: key) =
    let (a: host, b: host, nA: nonce) = m1 in
    (encrypt(kAS, (nA, kAB, b, encrypt(kBS, (kAB, a)))), a).

letfun handshake_A (state: bitstring, m2: bitstring) =
    let (kAS: key, b: host, nA: nonce) = state in
    let (=nA, kAB: key, =b, m3: bitstring) = decrypt(kAS, m2) in
    (kAB, m3).




letfun handshake_B (kBS: key, m3: bitstring, nB: nonce) =
    let (kAB: key, a: host) = decrypt(kBS, m3) in
    ((kAB, nB), encrypt(kAB, nonce_to_bitstring(nB)), a).



letfun accept_A (kAB: key, m4: bitstring) =
    let nB = bitstring_to_nonce(decrypt(kAB, m4)) in
    (kAB, encrypt(kAB, nonce_to_bitstring(dec(nB)))).



letfun accept_B (state: bitstring, m5: bitstring) =
    let (kAB: key, nB: nonce) = state in
    let nBp = bitstring_to_nonce(decrypt(kAB, m5)) in
    if dec(nB) = nBp
    then kAB.


let processA(kAS: key) =
    new nA: nonce;
    let (state1: bitstring, m1: bitstring) = initiate_A(kAS, A, B, nA) in
    out(c, m1);
    in(c, m2: bitstring);
    let (state2: key, m3: bitstring) = handshake_A(state1, m2) in
    out(c, m3);
    in(c, m4: bitstring);
    let (kAB: key, m5: bitstring) = accept_A(state2, m4) in
    out(c, m5);
    out(c, encrypt(kAB, secretA));
    event initiatorAccepts(A, B).

let processB(kBS: key) =
    in(c, m3: bitstring);
    new nB: nonce;
    let (state1: bitstring, m4: bitstring, a: host) = handshake_B(kBS, m3, nB) in
    out(c, m4);
    in(c, m5: bitstring);
    let kAB = accept_B(state1, m5) in
    event responderAccepts(a, B);
    if a = A then out(c, encrypt(kAB, secretB)).

table keys(host, key).

let processS =
    in(c, m1: bitstring);
    let (a: host, b: host, nA: nonce) = m1 in
    get keys(=a, kAS) in
    get keys(=b, kBS) in
    new kAB: key;
    let (m2: bitstring, =a) = generate_key_S (kAS, kBS, m1, kAB) in
    out(c, m2).

let processK =
    in(c, (h: host, k: key));
    if h <> A && h <> B then insert keys(h, k).

process
    new kAS: key;
    new kBS: key;
    insert keys(A, kAS);
    insert keys(B, kBS);
    (
        (!processA(kAS))|
        (!processB(kBS))|
        (!processS)|
        (!processK)
    )
